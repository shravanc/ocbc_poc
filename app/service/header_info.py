from constant import HEADER_LINE_VERTICAL_PIXELS, HEADER_TAB_SPACE_PIXELS


def extract_tab_separaterd_text(tbl_words):
    """
    @param tbl_words: list of dict of words generated by pdfplumber
    @type tbl_words: list
    @return: tab separated header string
    @rtype: string
    """
    word_arr = []
    for index, word in enumerate(tbl_words):
        # x0, x1, top, bottom are the coordinates of the word while the 'text' is the actual text of the word.
        word_arr.append(word['text'] + ' ')
        if index + 1 < len(tbl_words):
            if word['bottom'] + HEADER_LINE_VERTICAL_PIXELS < tbl_words[index + 1]['bottom']:
                # Add a new line if the Y coordinate of the two consecutive word is more than the HEADER_LINE_VERTICAL_PIXELS.
                word_arr.append('\n')
            if word['x1'] + HEADER_TAB_SPACE_PIXELS < tbl_words[index + 1]['x0']:
                # Add a tab if the X coordinate of the two consecutive word is more than the HEADER_TAB_SPACE_PIXELS.
                word_arr.append('\t\t')
    tab_separaterd_header = ''.join(word_arr)
    return tab_separaterd_header


def get_text_info(cropped_header):
    """
    @param cropped_header: Header bbox cropped from pdf page
    @type cropped_header: CroppedPage
    @return: tab_separated_header and Font data for each word
    @rtype: dict
    """

    # PDFPlumber attribute 'chars' to get all the characters present in the cropped page.
    chars = cropped_header.chars

    # PDFPlumber method 'extract_words()' to get all the words present in the cropped page.
    tbl_words = cropped_header.extract_words()

    tab_sep_text = extract_tab_separaterd_text(tbl_words)
    return tab_sep_text
